{"version":3,"sources":["components/record/record.jsx","App.js","serviceWorker.js","index.js"],"names":["finalPosition","dirtCollected","totalDistance","totalWallHits","Record","props","rows","drivingInstructions","className","style","textAlign","initialRoombaLocation","dirtLocations","join","split","includes","map","val","ind","key","direction","roomSize","wallHit","roombaLocation","x","y","max_x","max_y","mRoombaLocation","roombaMovement","roomDimensions","data","i","App","useState","setData","onReaderLoad","event","obj","JSON","parse","target","result","type","onChange","e","reader","FileReader","onload","readAsText","files","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEIA,EAAgB,GAChBC,EAAgB,EAChBC,EAAgB,EAChBC,EAAgB,EA+CPC,EAAS,SAAAC,GAAK,OACxBA,EAAMC,MAASD,EAAMC,KAAKC,oBACtB,6BACC,6BACA,2BAAOC,UAAU,kBAAkBC,MAAO,CAACC,UAAW,WACpD,+BACE,4BACE,oCACA,+CACA,sCACA,oDACA,iDAIJ,+BACE,4BACE,iCACA,sCAAQL,EAAMC,KAAKK,sBAAsB,GAAzC,aAAgDN,EAAMC,KAAKK,sBAAsB,KACjF,6BACA,4BAEIN,EAAMC,KAAKM,cAAcC,KAAK,KAAKC,MAAM,KAAKC,SAASV,EAAMC,KAAKK,sBAAsBE,QAAUZ,GAAe,EAAIA,GAGzH,kCAEDI,EAAMC,KAAKC,oBAAoBS,KAAI,SAACC,EAAKC,GACxC,OACE,wBAAIC,IAAKF,EAAMC,GACb,4BAAKA,EAAM,GA1EN,SAACE,EAAYT,EAAuBU,EAAUT,GAEnE,IAAIU,EAAU,EACRC,EAAiBZ,EACjBa,EAAID,EAAe,GACnBE,EAAIF,EAAe,GACnBG,EAAQL,EAAS,GACjBM,EAAQN,EAAS,GACjBO,EAAkBL,EAAeV,OAgCvC,OA/BuBD,EAAcC,KAAK,KAAKC,MAAM,KAElCC,SAASa,KAC1B3B,GAAiB,GAIV,IAANuB,GAAuB,MAAZJ,GACL,IAANK,GAAyB,MAAdL,GACXM,IAAUF,GAAiB,MAAZJ,GACfO,IAAUF,GAAiB,MAAZL,GAEhBE,GAAW,IACTnB,EACFiB,EAAY,IACW,MAAdA,GACTG,EAAe,IAAM,IACnBrB,GACqB,MAAdkB,GACTG,EAAe,IAAM,IACnBrB,GACqB,MAAdkB,GACTG,EAAe,IAAM,IACnBrB,IAEFqB,EAAe,IAAM,IACnBrB,GAGJF,EAAa,UAAMuB,EAAe,GAArB,aAA4BA,EAAe,IAEjD,CAAC,GAAD,OAAIA,GAAkBH,EAAWnB,EAAeqB,GAmCrCO,CAAeZ,EAAKZ,EAAMC,KAAKK,sBAAuBN,EAAMC,KAAKwB,eAAgBzB,EAAMC,KAAKM,eAC3FI,KAAI,SAACe,EAAMC,GAAP,OAAc,wBAAIb,IAAKY,EAAOC,GAAID,YAOnD,6BACA,8CAAoB/B,GACpB,oDAA0BC,GAC1B,uDAA6BC,GAC7B,+CAAqBC,IA1CsB,M,MCvBpC8B,MA1Bf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNH,EADM,KACAI,EADA,KASPC,EAAe,SAACC,GACpB,IAAMC,EAAMC,KAAKC,MAAMH,EAAMI,OAAOC,QACpCP,EAAQG,IAIV,OACE,oCACE,kDAEA,2BAAO9B,UAAU,YAAYmC,KAAK,OAAOC,SAhBxB,SAAAC,GACnB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAASZ,EAChBU,EAAOG,WAAWJ,EAAEJ,OAAOS,MAAM,OAc/B,6BACA,kBAAC,EAAD,CAAQ5C,KAAMyB,MCbAoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1ce7b78.chunk.js","sourcesContent":["import React from 'react';\n\nlet finalPosition = \"\"\nlet dirtCollected = 0\nlet totalDistance = 0\nlet totalWallHits = 0\n\n\nconst roombaMovement = (direction , initialRoombaLocation, roomSize, dirtLocations) => {\n\n  let wallHit = 0;\n  const roombaLocation = initialRoombaLocation\n  const x = roombaLocation[0]\n  const y = roombaLocation[1]\n  const max_x = roomSize[0]\n  const max_y = roomSize[1]\n  const mRoombaLocation = roombaLocation.join();\n  const mDirtLocations = dirtLocations.join('-').split('-')\n\n  if (mDirtLocations.includes(mRoombaLocation)) {\n    dirtCollected += 1\n  }\n\n  if (\n    (x === 0 && direction===\"W\") ||\n    (y === 0 && direction === \"S\") ||\n    (max_x === x && direction===\"E\") ||\n    (max_y === y && direction===\"N\")\n   ) {\n    wallHit += 1;\n    ++totalWallHits\n    direction = \"\";\n  } else if (direction === \"W\" ) {\n    roombaLocation[0] -= 1;\n    ++totalDistance\n  } else if (direction === \"E\") {\n    roombaLocation[0] += 1;\n    ++totalDistance\n  } else if (direction === \"S\") {\n    roombaLocation[1] -= 1;\n    ++totalDistance\n  } else {\n    roombaLocation[1] += 1;\n    ++totalDistance\n    }\n\n  finalPosition = `${roombaLocation[0]}, ${roombaLocation[1]}`\n\n  return [`${roombaLocation}`, direction, dirtCollected, wallHit];\n}\n\n\nexport const Record = props => (\n  !props.rows || !props.rows.drivingInstructions ? null : (\n       <div>\n        <br />\n        <table className=\"ui celled table\" style={{textAlign: \"center\"}}>\n          <thead>\n            <tr>\n              <th>Step</th>\n              <th>Roomba Location</th>\n              <th>Action</th>\n              <th>Total Dirt Collected</th>\n              <th>Total Wall Hits</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td>1</td>\n              <td>{`${props.rows.initialRoombaLocation[0]}, ${props.rows.initialRoombaLocation[1]}`}</td>\n              <td></td>\n              <td>\n                {\n                  props.rows.dirtLocations.join('-').split('-').includes(props.rows.initialRoombaLocation.join()) ? dirtCollected+=1 : dirtCollected\n                }\n              </td>\n              <td>0</td>\n            </tr>\n            {props.rows.drivingInstructions.map((val, ind) => {\n              return (\n                <tr key={val + ind}>\n                  <td>{ind + 2}</td>\n                  { roombaMovement(val, props.rows.initialRoombaLocation, props.rows.roomDimensions, props.rows.dirtLocations)\n                    .map((data, i) => (<td key={data + i}>{data}</td>))\n                  }\n                </tr>\n              )\n          })}\n          </tbody>\n        </table>\n        <br />\n        <p>Final Position: {finalPosition}</p>\n        <p>Total Dirt Collected: {dirtCollected}</p>\n        <p>Total Distance Traveled: {totalDistance}</p>\n        <p>Total Walls Hit: {totalWallHits}</p>\n      </div>\n  )\n);\n\n","import React, { useState } from \"react\";\nimport { Record } from './components/record/record.jsx';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleChange = e => {\n    const reader = new FileReader();\n    reader.onload = onReaderLoad;\n    reader.readAsText(e.target.files[0]);\n  };\n\n  const onReaderLoad = (event) => {\n    const obj = JSON.parse(event.target.result);\n    setData(obj)\n  }\n\n\n  return (\n    <>\n      <h1>Upload A Json File</h1>\n\n      <input className='ui button' type=\"file\" onChange={handleChange} />\n      <br />\n      <Record rows={data}/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}